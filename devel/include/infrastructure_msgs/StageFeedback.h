// Generated by gencpp from file infrastructure_msgs/StageFeedback.msg
// DO NOT EDIT!


#ifndef INFRASTRUCTURE_MSGS_MESSAGE_STAGEFEEDBACK_H
#define INFRASTRUCTURE_MSGS_MESSAGE_STAGEFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace infrastructure_msgs
{
template <class ContainerAllocator>
struct StageFeedback_
{
  typedef StageFeedback_<ContainerAllocator> Type;

  StageFeedback_()
    : stage_status()  {
    }
  StageFeedback_(const ContainerAllocator& _alloc)
    : stage_status(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _stage_status_type;
  _stage_status_type stage_status;





  typedef boost::shared_ptr< ::infrastructure_msgs::StageFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::infrastructure_msgs::StageFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct StageFeedback_

typedef ::infrastructure_msgs::StageFeedback_<std::allocator<void> > StageFeedback;

typedef boost::shared_ptr< ::infrastructure_msgs::StageFeedback > StageFeedbackPtr;
typedef boost::shared_ptr< ::infrastructure_msgs::StageFeedback const> StageFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::infrastructure_msgs::StageFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::infrastructure_msgs::StageFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::infrastructure_msgs::StageFeedback_<ContainerAllocator1> & lhs, const ::infrastructure_msgs::StageFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.stage_status == rhs.stage_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::infrastructure_msgs::StageFeedback_<ContainerAllocator1> & lhs, const ::infrastructure_msgs::StageFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace infrastructure_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::infrastructure_msgs::StageFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::infrastructure_msgs::StageFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::infrastructure_msgs::StageFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::infrastructure_msgs::StageFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::infrastructure_msgs::StageFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::infrastructure_msgs::StageFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::infrastructure_msgs::StageFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "44a8ac12072e758309ae673f423970a5";
  }

  static const char* value(const ::infrastructure_msgs::StageFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x44a8ac12072e7583ULL;
  static const uint64_t static_value2 = 0x09ae673f423970a5ULL;
};

template<class ContainerAllocator>
struct DataType< ::infrastructure_msgs::StageFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "infrastructure_msgs/StageFeedback";
  }

  static const char* value(const ::infrastructure_msgs::StageFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::infrastructure_msgs::StageFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"string stage_status\n"
"\n"
;
  }

  static const char* value(const ::infrastructure_msgs::StageFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::infrastructure_msgs::StageFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stage_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StageFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::infrastructure_msgs::StageFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::infrastructure_msgs::StageFeedback_<ContainerAllocator>& v)
  {
    s << indent << "stage_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.stage_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INFRASTRUCTURE_MSGS_MESSAGE_STAGEFEEDBACK_H
