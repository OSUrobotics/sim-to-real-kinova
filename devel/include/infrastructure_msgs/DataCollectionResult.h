// Generated by gencpp from file infrastructure_msgs/DataCollectionResult.msg
// DO NOT EDIT!


#ifndef INFRASTRUCTURE_MSGS_MESSAGE_DATACOLLECTIONRESULT_H
#define INFRASTRUCTURE_MSGS_MESSAGE_DATACOLLECTIONRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace infrastructure_msgs
{
template <class ContainerAllocator>
struct DataCollectionResult_
{
  typedef DataCollectionResult_<ContainerAllocator> Type;

  DataCollectionResult_()
    : collection_stop(false)  {
    }
  DataCollectionResult_(const ContainerAllocator& _alloc)
    : collection_stop(false)  {
  (void)_alloc;
    }



   typedef uint8_t _collection_stop_type;
  _collection_stop_type collection_stop;





  typedef boost::shared_ptr< ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator> const> ConstPtr;

}; // struct DataCollectionResult_

typedef ::infrastructure_msgs::DataCollectionResult_<std::allocator<void> > DataCollectionResult;

typedef boost::shared_ptr< ::infrastructure_msgs::DataCollectionResult > DataCollectionResultPtr;
typedef boost::shared_ptr< ::infrastructure_msgs::DataCollectionResult const> DataCollectionResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator1> & lhs, const ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator2> & rhs)
{
  return lhs.collection_stop == rhs.collection_stop;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator1> & lhs, const ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace infrastructure_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a92c4b50c6b16b340318f91aaaf7f2ff";
  }

  static const char* value(const ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa92c4b50c6b16b34ULL;
  static const uint64_t static_value2 = 0x0318f91aaaf7f2ffULL;
};

template<class ContainerAllocator>
struct DataType< ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "infrastructure_msgs/DataCollectionResult";
  }

  static const char* value(const ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#result\n"
"bool collection_stop\n"
;
  }

  static const char* value(const ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.collection_stop);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DataCollectionResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::infrastructure_msgs::DataCollectionResult_<ContainerAllocator>& v)
  {
    s << indent << "collection_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.collection_stop);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INFRASTRUCTURE_MSGS_MESSAGE_DATACOLLECTIONRESULT_H
