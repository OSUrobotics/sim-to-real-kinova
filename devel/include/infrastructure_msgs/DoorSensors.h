// Generated by gencpp from file infrastructure_msgs/DoorSensors.msg
// DO NOT EDIT!


#ifndef INFRASTRUCTURE_MSGS_MESSAGE_DOORSENSORS_H
#define INFRASTRUCTURE_MSGS_MESSAGE_DOORSENSORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace infrastructure_msgs
{
template <class ContainerAllocator>
struct DoorSensors_
{
  typedef DoorSensors_<ContainerAllocator> Type;

  DoorSensors_()
    : current_time()
    , tof(0.0)
    , fsr1(0)
    , fsr2(0)
    , fsr3(0)
    , fsr4(0)
    , fsr5(0)
    , fsr6(0)
    , fsr7(0)
    , fsr8(0)
    , fsr9(0)
    , fsr10(0)
    , fsr11(0)
    , fsr12(0)
    , fsr_contact_1(0)
    , fsr_contact_2(0)  {
    }
  DoorSensors_(const ContainerAllocator& _alloc)
    : current_time()
    , tof(0.0)
    , fsr1(0)
    , fsr2(0)
    , fsr3(0)
    , fsr4(0)
    , fsr5(0)
    , fsr6(0)
    , fsr7(0)
    , fsr8(0)
    , fsr9(0)
    , fsr10(0)
    , fsr11(0)
    , fsr12(0)
    , fsr_contact_1(0)
    , fsr_contact_2(0)  {
  (void)_alloc;
    }



   typedef ros::Time _current_time_type;
  _current_time_type current_time;

   typedef float _tof_type;
  _tof_type tof;

   typedef int32_t _fsr1_type;
  _fsr1_type fsr1;

   typedef int32_t _fsr2_type;
  _fsr2_type fsr2;

   typedef int32_t _fsr3_type;
  _fsr3_type fsr3;

   typedef int32_t _fsr4_type;
  _fsr4_type fsr4;

   typedef int32_t _fsr5_type;
  _fsr5_type fsr5;

   typedef int32_t _fsr6_type;
  _fsr6_type fsr6;

   typedef int32_t _fsr7_type;
  _fsr7_type fsr7;

   typedef int32_t _fsr8_type;
  _fsr8_type fsr8;

   typedef int32_t _fsr9_type;
  _fsr9_type fsr9;

   typedef int32_t _fsr10_type;
  _fsr10_type fsr10;

   typedef int32_t _fsr11_type;
  _fsr11_type fsr11;

   typedef int32_t _fsr12_type;
  _fsr12_type fsr12;

   typedef int32_t _fsr_contact_1_type;
  _fsr_contact_1_type fsr_contact_1;

   typedef int32_t _fsr_contact_2_type;
  _fsr_contact_2_type fsr_contact_2;





  typedef boost::shared_ptr< ::infrastructure_msgs::DoorSensors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::infrastructure_msgs::DoorSensors_<ContainerAllocator> const> ConstPtr;

}; // struct DoorSensors_

typedef ::infrastructure_msgs::DoorSensors_<std::allocator<void> > DoorSensors;

typedef boost::shared_ptr< ::infrastructure_msgs::DoorSensors > DoorSensorsPtr;
typedef boost::shared_ptr< ::infrastructure_msgs::DoorSensors const> DoorSensorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::infrastructure_msgs::DoorSensors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::infrastructure_msgs::DoorSensors_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::infrastructure_msgs::DoorSensors_<ContainerAllocator1> & lhs, const ::infrastructure_msgs::DoorSensors_<ContainerAllocator2> & rhs)
{
  return lhs.current_time == rhs.current_time &&
    lhs.tof == rhs.tof &&
    lhs.fsr1 == rhs.fsr1 &&
    lhs.fsr2 == rhs.fsr2 &&
    lhs.fsr3 == rhs.fsr3 &&
    lhs.fsr4 == rhs.fsr4 &&
    lhs.fsr5 == rhs.fsr5 &&
    lhs.fsr6 == rhs.fsr6 &&
    lhs.fsr7 == rhs.fsr7 &&
    lhs.fsr8 == rhs.fsr8 &&
    lhs.fsr9 == rhs.fsr9 &&
    lhs.fsr10 == rhs.fsr10 &&
    lhs.fsr11 == rhs.fsr11 &&
    lhs.fsr12 == rhs.fsr12 &&
    lhs.fsr_contact_1 == rhs.fsr_contact_1 &&
    lhs.fsr_contact_2 == rhs.fsr_contact_2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::infrastructure_msgs::DoorSensors_<ContainerAllocator1> & lhs, const ::infrastructure_msgs::DoorSensors_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace infrastructure_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::infrastructure_msgs::DoorSensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::infrastructure_msgs::DoorSensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::infrastructure_msgs::DoorSensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::infrastructure_msgs::DoorSensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::infrastructure_msgs::DoorSensors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::infrastructure_msgs::DoorSensors_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::infrastructure_msgs::DoorSensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "78d3070a7f6d7fc59eb47b90108edee6";
  }

  static const char* value(const ::infrastructure_msgs::DoorSensors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x78d3070a7f6d7fc5ULL;
  static const uint64_t static_value2 = 0x9eb47b90108edee6ULL;
};

template<class ContainerAllocator>
struct DataType< ::infrastructure_msgs::DoorSensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "infrastructure_msgs/DoorSensors";
  }

  static const char* value(const ::infrastructure_msgs::DoorSensors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::infrastructure_msgs::DoorSensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time current_time\n"
"float32 tof \n"
"int32 fsr1\n"
"int32 fsr2\n"
"int32 fsr3\n"
"int32 fsr4\n"
"int32 fsr5\n"
"int32 fsr6\n"
"int32 fsr7\n"
"int32 fsr8\n"
"int32 fsr9\n"
"int32 fsr10\n"
"int32 fsr11\n"
"int32 fsr12\n"
"int32 fsr_contact_1\n"
"int32 fsr_contact_2\n"
;
  }

  static const char* value(const ::infrastructure_msgs::DoorSensors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::infrastructure_msgs::DoorSensors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_time);
      stream.next(m.tof);
      stream.next(m.fsr1);
      stream.next(m.fsr2);
      stream.next(m.fsr3);
      stream.next(m.fsr4);
      stream.next(m.fsr5);
      stream.next(m.fsr6);
      stream.next(m.fsr7);
      stream.next(m.fsr8);
      stream.next(m.fsr9);
      stream.next(m.fsr10);
      stream.next(m.fsr11);
      stream.next(m.fsr12);
      stream.next(m.fsr_contact_1);
      stream.next(m.fsr_contact_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DoorSensors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::infrastructure_msgs::DoorSensors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::infrastructure_msgs::DoorSensors_<ContainerAllocator>& v)
  {
    s << indent << "current_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.current_time);
    s << indent << "tof: ";
    Printer<float>::stream(s, indent + "  ", v.tof);
    s << indent << "fsr1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fsr1);
    s << indent << "fsr2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fsr2);
    s << indent << "fsr3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fsr3);
    s << indent << "fsr4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fsr4);
    s << indent << "fsr5: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fsr5);
    s << indent << "fsr6: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fsr6);
    s << indent << "fsr7: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fsr7);
    s << indent << "fsr8: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fsr8);
    s << indent << "fsr9: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fsr9);
    s << indent << "fsr10: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fsr10);
    s << indent << "fsr11: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fsr11);
    s << indent << "fsr12: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fsr12);
    s << indent << "fsr_contact_1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fsr_contact_1);
    s << indent << "fsr_contact_2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fsr_contact_2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INFRASTRUCTURE_MSGS_MESSAGE_DOORSENSORS_H
