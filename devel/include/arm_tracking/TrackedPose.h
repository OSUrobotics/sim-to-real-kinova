// Generated by gencpp from file arm_tracking/TrackedPose.msg
// DO NOT EDIT!


#ifndef ARM_TRACKING_MESSAGE_TRACKEDPOSE_H
#define ARM_TRACKING_MESSAGE_TRACKEDPOSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arm_tracking
{
template <class ContainerAllocator>
struct TrackedPose_
{
  typedef TrackedPose_<ContainerAllocator> Type;

  TrackedPose_()
    : robot_base_rvec()
    , robot_base_tvec()
    , robot_ef_rvec()
    , robot_ef_tvec()
    , workpiece_rvec()
    , workpiece_tvec()
    , workpiece_corners_x()
    , workpiece_corners_y()
    , robot_ef_corners_x()
    , robot_ef_corners_y()  {
    }
  TrackedPose_(const ContainerAllocator& _alloc)
    : robot_base_rvec(_alloc)
    , robot_base_tvec(_alloc)
    , robot_ef_rvec(_alloc)
    , robot_ef_tvec(_alloc)
    , workpiece_rvec(_alloc)
    , workpiece_tvec(_alloc)
    , workpiece_corners_x(_alloc)
    , workpiece_corners_y(_alloc)
    , robot_ef_corners_x(_alloc)
    , robot_ef_corners_y(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _robot_base_rvec_type;
  _robot_base_rvec_type robot_base_rvec;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _robot_base_tvec_type;
  _robot_base_tvec_type robot_base_tvec;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _robot_ef_rvec_type;
  _robot_ef_rvec_type robot_ef_rvec;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _robot_ef_tvec_type;
  _robot_ef_tvec_type robot_ef_tvec;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _workpiece_rvec_type;
  _workpiece_rvec_type workpiece_rvec;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _workpiece_tvec_type;
  _workpiece_tvec_type workpiece_tvec;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _workpiece_corners_x_type;
  _workpiece_corners_x_type workpiece_corners_x;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _workpiece_corners_y_type;
  _workpiece_corners_y_type workpiece_corners_y;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _robot_ef_corners_x_type;
  _robot_ef_corners_x_type robot_ef_corners_x;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _robot_ef_corners_y_type;
  _robot_ef_corners_y_type robot_ef_corners_y;





  typedef boost::shared_ptr< ::arm_tracking::TrackedPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_tracking::TrackedPose_<ContainerAllocator> const> ConstPtr;

}; // struct TrackedPose_

typedef ::arm_tracking::TrackedPose_<std::allocator<void> > TrackedPose;

typedef boost::shared_ptr< ::arm_tracking::TrackedPose > TrackedPosePtr;
typedef boost::shared_ptr< ::arm_tracking::TrackedPose const> TrackedPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_tracking::TrackedPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_tracking::TrackedPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_tracking::TrackedPose_<ContainerAllocator1> & lhs, const ::arm_tracking::TrackedPose_<ContainerAllocator2> & rhs)
{
  return lhs.robot_base_rvec == rhs.robot_base_rvec &&
    lhs.robot_base_tvec == rhs.robot_base_tvec &&
    lhs.robot_ef_rvec == rhs.robot_ef_rvec &&
    lhs.robot_ef_tvec == rhs.robot_ef_tvec &&
    lhs.workpiece_rvec == rhs.workpiece_rvec &&
    lhs.workpiece_tvec == rhs.workpiece_tvec &&
    lhs.workpiece_corners_x == rhs.workpiece_corners_x &&
    lhs.workpiece_corners_y == rhs.workpiece_corners_y &&
    lhs.robot_ef_corners_x == rhs.robot_ef_corners_x &&
    lhs.robot_ef_corners_y == rhs.robot_ef_corners_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_tracking::TrackedPose_<ContainerAllocator1> & lhs, const ::arm_tracking::TrackedPose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_tracking

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_tracking::TrackedPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_tracking::TrackedPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_tracking::TrackedPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_tracking::TrackedPose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_tracking::TrackedPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_tracking::TrackedPose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_tracking::TrackedPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "339ac58acc7c50a83fc20359186dc24d";
  }

  static const char* value(const ::arm_tracking::TrackedPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x339ac58acc7c50a8ULL;
  static const uint64_t static_value2 = 0x3fc20359186dc24dULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_tracking::TrackedPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_tracking/TrackedPose";
  }

  static const char* value(const ::arm_tracking::TrackedPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_tracking::TrackedPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] robot_base_rvec\n"
"float64[] robot_base_tvec\n"
"float64[] robot_ef_rvec\n"
"float64[] robot_ef_tvec\n"
"float64[] workpiece_rvec\n"
"float64[] workpiece_tvec\n"
"#workpiece marker corner x coordinates\n"
"float64[] workpiece_corners_x \n"
"#workpiece marker corner y coordinates\n"
"float64[] workpiece_corners_y \n"
"\n"
"#robot ef marker corner x coordinates\n"
"float64[] robot_ef_corners_x \n"
"#robot ef marker corner y coordinates\n"
"float64[] robot_ef_corners_y \n"
;
  }

  static const char* value(const ::arm_tracking::TrackedPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_tracking::TrackedPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_base_rvec);
      stream.next(m.robot_base_tvec);
      stream.next(m.robot_ef_rvec);
      stream.next(m.robot_ef_tvec);
      stream.next(m.workpiece_rvec);
      stream.next(m.workpiece_tvec);
      stream.next(m.workpiece_corners_x);
      stream.next(m.workpiece_corners_y);
      stream.next(m.robot_ef_corners_x);
      stream.next(m.robot_ef_corners_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackedPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_tracking::TrackedPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_tracking::TrackedPose_<ContainerAllocator>& v)
  {
    s << indent << "robot_base_rvec[]" << std::endl;
    for (size_t i = 0; i < v.robot_base_rvec.size(); ++i)
    {
      s << indent << "  robot_base_rvec[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.robot_base_rvec[i]);
    }
    s << indent << "robot_base_tvec[]" << std::endl;
    for (size_t i = 0; i < v.robot_base_tvec.size(); ++i)
    {
      s << indent << "  robot_base_tvec[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.robot_base_tvec[i]);
    }
    s << indent << "robot_ef_rvec[]" << std::endl;
    for (size_t i = 0; i < v.robot_ef_rvec.size(); ++i)
    {
      s << indent << "  robot_ef_rvec[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.robot_ef_rvec[i]);
    }
    s << indent << "robot_ef_tvec[]" << std::endl;
    for (size_t i = 0; i < v.robot_ef_tvec.size(); ++i)
    {
      s << indent << "  robot_ef_tvec[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.robot_ef_tvec[i]);
    }
    s << indent << "workpiece_rvec[]" << std::endl;
    for (size_t i = 0; i < v.workpiece_rvec.size(); ++i)
    {
      s << indent << "  workpiece_rvec[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.workpiece_rvec[i]);
    }
    s << indent << "workpiece_tvec[]" << std::endl;
    for (size_t i = 0; i < v.workpiece_tvec.size(); ++i)
    {
      s << indent << "  workpiece_tvec[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.workpiece_tvec[i]);
    }
    s << indent << "workpiece_corners_x[]" << std::endl;
    for (size_t i = 0; i < v.workpiece_corners_x.size(); ++i)
    {
      s << indent << "  workpiece_corners_x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.workpiece_corners_x[i]);
    }
    s << indent << "workpiece_corners_y[]" << std::endl;
    for (size_t i = 0; i < v.workpiece_corners_y.size(); ++i)
    {
      s << indent << "  workpiece_corners_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.workpiece_corners_y[i]);
    }
    s << indent << "robot_ef_corners_x[]" << std::endl;
    for (size_t i = 0; i < v.robot_ef_corners_x.size(); ++i)
    {
      s << indent << "  robot_ef_corners_x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.robot_ef_corners_x[i]);
    }
    s << indent << "robot_ef_corners_y[]" << std::endl;
    for (size_t i = 0; i < v.robot_ef_corners_y.size(); ++i)
    {
      s << indent << "  robot_ef_corners_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.robot_ef_corners_y[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_TRACKING_MESSAGE_TRACKEDPOSE_H
