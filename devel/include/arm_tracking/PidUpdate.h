// Generated by gencpp from file arm_tracking/PidUpdate.msg
// DO NOT EDIT!


#ifndef ARM_TRACKING_MESSAGE_PIDUPDATE_H
#define ARM_TRACKING_MESSAGE_PIDUPDATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <arm_tracking/PidParam.h>

namespace arm_tracking
{
template <class ContainerAllocator>
struct PidUpdate_
{
  typedef PidUpdate_<ContainerAllocator> Type;

  PidUpdate_()
    : header()
    , pid_param()
    , error()
    , integ_error()
    , delta_error()
    , response()  {
    }
  PidUpdate_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pid_param(_alloc)
    , error(_alloc)
    , integ_error(_alloc)
    , delta_error(_alloc)
    , response(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::arm_tracking::PidParam_<ContainerAllocator>  _pid_param_type;
  _pid_param_type pid_param;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _error_type;
  _error_type error;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _integ_error_type;
  _integ_error_type integ_error;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _delta_error_type;
  _delta_error_type delta_error;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _response_type;
  _response_type response;





  typedef boost::shared_ptr< ::arm_tracking::PidUpdate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_tracking::PidUpdate_<ContainerAllocator> const> ConstPtr;

}; // struct PidUpdate_

typedef ::arm_tracking::PidUpdate_<std::allocator<void> > PidUpdate;

typedef boost::shared_ptr< ::arm_tracking::PidUpdate > PidUpdatePtr;
typedef boost::shared_ptr< ::arm_tracking::PidUpdate const> PidUpdateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_tracking::PidUpdate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_tracking::PidUpdate_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_tracking::PidUpdate_<ContainerAllocator1> & lhs, const ::arm_tracking::PidUpdate_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.pid_param == rhs.pid_param &&
    lhs.error == rhs.error &&
    lhs.integ_error == rhs.integ_error &&
    lhs.delta_error == rhs.delta_error &&
    lhs.response == rhs.response;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_tracking::PidUpdate_<ContainerAllocator1> & lhs, const ::arm_tracking::PidUpdate_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_tracking

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_tracking::PidUpdate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_tracking::PidUpdate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_tracking::PidUpdate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_tracking::PidUpdate_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_tracking::PidUpdate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_tracking::PidUpdate_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_tracking::PidUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9372ece7e9f74def456f1090966e8315";
  }

  static const char* value(const ::arm_tracking::PidUpdate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9372ece7e9f74defULL;
  static const uint64_t static_value2 = 0x456f1090966e8315ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_tracking::PidUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_tracking/PidUpdate";
  }

  static const char* value(const ::arm_tracking::PidUpdate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_tracking::PidUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"#kp,kd,ki\n"
"arm_tracking/PidParam pid_param\n"
"float64[] error\n"
"float64[] integ_error\n"
"float64[] delta_error\n"
"\n"
"#kp*e + kd*delta_e + ki*integ_e\n"
"float64[] response\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: arm_tracking/PidParam\n"
"float64 kp\n"
"float64 ki\n"
"float64 kd\n"
;
  }

  static const char* value(const ::arm_tracking::PidUpdate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_tracking::PidUpdate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pid_param);
      stream.next(m.error);
      stream.next(m.integ_error);
      stream.next(m.delta_error);
      stream.next(m.response);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PidUpdate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_tracking::PidUpdate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_tracking::PidUpdate_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pid_param: ";
    s << std::endl;
    Printer< ::arm_tracking::PidParam_<ContainerAllocator> >::stream(s, indent + "  ", v.pid_param);
    s << indent << "error[]" << std::endl;
    for (size_t i = 0; i < v.error.size(); ++i)
    {
      s << indent << "  error[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.error[i]);
    }
    s << indent << "integ_error[]" << std::endl;
    for (size_t i = 0; i < v.integ_error.size(); ++i)
    {
      s << indent << "  integ_error[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.integ_error[i]);
    }
    s << indent << "delta_error[]" << std::endl;
    for (size_t i = 0; i < v.delta_error.size(); ++i)
    {
      s << indent << "  delta_error[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.delta_error[i]);
    }
    s << indent << "response[]" << std::endl;
    for (size_t i = 0; i < v.response.size(); ++i)
    {
      s << indent << "  response[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.response[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_TRACKING_MESSAGE_PIDUPDATE_H
