# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from infrastructure_msgs/DataTimestamps.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class DataTimestamps(genpy.Message):
  _md5sum = "0b7790f826e3d5970b2ea5a3e61bdd36"
  _type = "infrastructure_msgs/DataTimestamps"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 trial_number
time collection_start_time
time collection_end_time
float64 total_time
"""
  __slots__ = ['trial_number','collection_start_time','collection_end_time','total_time']
  _slot_types = ['int64','time','time','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       trial_number,collection_start_time,collection_end_time,total_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DataTimestamps, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.trial_number is None:
        self.trial_number = 0
      if self.collection_start_time is None:
        self.collection_start_time = genpy.Time()
      if self.collection_end_time is None:
        self.collection_end_time = genpy.Time()
      if self.total_time is None:
        self.total_time = 0.
    else:
      self.trial_number = 0
      self.collection_start_time = genpy.Time()
      self.collection_end_time = genpy.Time()
      self.total_time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_q4Id().pack(_x.trial_number, _x.collection_start_time.secs, _x.collection_start_time.nsecs, _x.collection_end_time.secs, _x.collection_end_time.nsecs, _x.total_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.collection_start_time is None:
        self.collection_start_time = genpy.Time()
      if self.collection_end_time is None:
        self.collection_end_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.trial_number, _x.collection_start_time.secs, _x.collection_start_time.nsecs, _x.collection_end_time.secs, _x.collection_end_time.nsecs, _x.total_time,) = _get_struct_q4Id().unpack(str[start:end])
      self.collection_start_time.canon()
      self.collection_end_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_q4Id().pack(_x.trial_number, _x.collection_start_time.secs, _x.collection_start_time.nsecs, _x.collection_end_time.secs, _x.collection_end_time.nsecs, _x.total_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.collection_start_time is None:
        self.collection_start_time = genpy.Time()
      if self.collection_end_time is None:
        self.collection_end_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.trial_number, _x.collection_start_time.secs, _x.collection_start_time.nsecs, _x.collection_end_time.secs, _x.collection_end_time.nsecs, _x.total_time,) = _get_struct_q4Id().unpack(str[start:end])
      self.collection_start_time.canon()
      self.collection_end_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q4Id = None
def _get_struct_q4Id():
    global _struct_q4Id
    if _struct_q4Id is None:
        _struct_q4Id = struct.Struct("<q4Id")
    return _struct_q4Id
