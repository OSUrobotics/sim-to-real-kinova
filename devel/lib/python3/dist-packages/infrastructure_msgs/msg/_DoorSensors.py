# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from infrastructure_msgs/DoorSensors.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class DoorSensors(genpy.Message):
  _md5sum = "78d3070a7f6d7fc59eb47b90108edee6"
  _type = "infrastructure_msgs/DoorSensors"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """time current_time
float32 tof 
int32 fsr1
int32 fsr2
int32 fsr3
int32 fsr4
int32 fsr5
int32 fsr6
int32 fsr7
int32 fsr8
int32 fsr9
int32 fsr10
int32 fsr11
int32 fsr12
int32 fsr_contact_1
int32 fsr_contact_2
"""
  __slots__ = ['current_time','tof','fsr1','fsr2','fsr3','fsr4','fsr5','fsr6','fsr7','fsr8','fsr9','fsr10','fsr11','fsr12','fsr_contact_1','fsr_contact_2']
  _slot_types = ['time','float32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       current_time,tof,fsr1,fsr2,fsr3,fsr4,fsr5,fsr6,fsr7,fsr8,fsr9,fsr10,fsr11,fsr12,fsr_contact_1,fsr_contact_2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DoorSensors, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.current_time is None:
        self.current_time = genpy.Time()
      if self.tof is None:
        self.tof = 0.
      if self.fsr1 is None:
        self.fsr1 = 0
      if self.fsr2 is None:
        self.fsr2 = 0
      if self.fsr3 is None:
        self.fsr3 = 0
      if self.fsr4 is None:
        self.fsr4 = 0
      if self.fsr5 is None:
        self.fsr5 = 0
      if self.fsr6 is None:
        self.fsr6 = 0
      if self.fsr7 is None:
        self.fsr7 = 0
      if self.fsr8 is None:
        self.fsr8 = 0
      if self.fsr9 is None:
        self.fsr9 = 0
      if self.fsr10 is None:
        self.fsr10 = 0
      if self.fsr11 is None:
        self.fsr11 = 0
      if self.fsr12 is None:
        self.fsr12 = 0
      if self.fsr_contact_1 is None:
        self.fsr_contact_1 = 0
      if self.fsr_contact_2 is None:
        self.fsr_contact_2 = 0
    else:
      self.current_time = genpy.Time()
      self.tof = 0.
      self.fsr1 = 0
      self.fsr2 = 0
      self.fsr3 = 0
      self.fsr4 = 0
      self.fsr5 = 0
      self.fsr6 = 0
      self.fsr7 = 0
      self.fsr8 = 0
      self.fsr9 = 0
      self.fsr10 = 0
      self.fsr11 = 0
      self.fsr12 = 0
      self.fsr_contact_1 = 0
      self.fsr_contact_2 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2If14i().pack(_x.current_time.secs, _x.current_time.nsecs, _x.tof, _x.fsr1, _x.fsr2, _x.fsr3, _x.fsr4, _x.fsr5, _x.fsr6, _x.fsr7, _x.fsr8, _x.fsr9, _x.fsr10, _x.fsr11, _x.fsr12, _x.fsr_contact_1, _x.fsr_contact_2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.current_time is None:
        self.current_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 68
      (_x.current_time.secs, _x.current_time.nsecs, _x.tof, _x.fsr1, _x.fsr2, _x.fsr3, _x.fsr4, _x.fsr5, _x.fsr6, _x.fsr7, _x.fsr8, _x.fsr9, _x.fsr10, _x.fsr11, _x.fsr12, _x.fsr_contact_1, _x.fsr_contact_2,) = _get_struct_2If14i().unpack(str[start:end])
      self.current_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2If14i().pack(_x.current_time.secs, _x.current_time.nsecs, _x.tof, _x.fsr1, _x.fsr2, _x.fsr3, _x.fsr4, _x.fsr5, _x.fsr6, _x.fsr7, _x.fsr8, _x.fsr9, _x.fsr10, _x.fsr11, _x.fsr12, _x.fsr_contact_1, _x.fsr_contact_2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.current_time is None:
        self.current_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 68
      (_x.current_time.secs, _x.current_time.nsecs, _x.tof, _x.fsr1, _x.fsr2, _x.fsr3, _x.fsr4, _x.fsr5, _x.fsr6, _x.fsr7, _x.fsr8, _x.fsr9, _x.fsr10, _x.fsr11, _x.fsr12, _x.fsr_contact_1, _x.fsr_contact_2,) = _get_struct_2If14i().unpack(str[start:end])
      self.current_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2If14i = None
def _get_struct_2If14i():
    global _struct_2If14i
    if _struct_2If14i is None:
        _struct_2If14i = struct.Struct("<2If14i")
    return _struct_2If14i
