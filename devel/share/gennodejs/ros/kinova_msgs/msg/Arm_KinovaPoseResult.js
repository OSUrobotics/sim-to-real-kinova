// Auto-generated. Do not edit!

// (in-package kinova_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let KinovaPose = require('./KinovaPose.js');

//-----------------------------------------------------------

class Arm_KinovaPoseResult {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.kinova_pose = null;
    }
    else {
      if (initObj.hasOwnProperty('kinova_pose')) {
        this.kinova_pose = initObj.kinova_pose
      }
      else {
        this.kinova_pose = new KinovaPose();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type Arm_KinovaPoseResult
    // Serialize message field [kinova_pose]
    bufferOffset = KinovaPose.serialize(obj.kinova_pose, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type Arm_KinovaPoseResult
    let len;
    let data = new Arm_KinovaPoseResult(null);
    // Deserialize message field [kinova_pose]
    data.kinova_pose = KinovaPose.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    return 24;
  }

  static datatype() {
    // Returns string type for a message object
    return 'kinova_msgs/Arm_KinovaPoseResult';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'a3d0acc7643d70196e513c76ce4fd6d9';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Result
    KinovaPose kinova_pose
    
    ================================================================================
    MSG: kinova_msgs/KinovaPose
    float32 X
    float32 Y
    float32 Z
    float32 ThetaX
    float32 ThetaY
    float32 ThetaZ
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new Arm_KinovaPoseResult(null);
    if (msg.kinova_pose !== undefined) {
      resolved.kinova_pose = KinovaPose.Resolve(msg.kinova_pose)
    }
    else {
      resolved.kinova_pose = new KinovaPose()
    }

    return resolved;
    }
};

module.exports = Arm_KinovaPoseResult;
