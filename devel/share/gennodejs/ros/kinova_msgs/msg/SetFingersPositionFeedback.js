// Auto-generated. Do not edit!

// (in-package kinova_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let FingerPosition = require('./FingerPosition.js');

//-----------------------------------------------------------

class SetFingersPositionFeedback {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.fingers = null;
    }
    else {
      if (initObj.hasOwnProperty('fingers')) {
        this.fingers = initObj.fingers
      }
      else {
        this.fingers = new FingerPosition();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type SetFingersPositionFeedback
    // Serialize message field [fingers]
    bufferOffset = FingerPosition.serialize(obj.fingers, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type SetFingersPositionFeedback
    let len;
    let data = new SetFingersPositionFeedback(null);
    // Deserialize message field [fingers]
    data.fingers = FingerPosition.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    return 12;
  }

  static datatype() {
    // Returns string type for a message object
    return 'kinova_msgs/SetFingersPositionFeedback';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'bdbf88b45be6ef8cd65f0b4fc487d49d';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Feedback message
    FingerPosition fingers
    
    
    ================================================================================
    MSG: kinova_msgs/FingerPosition
    float32 finger1
    float32 finger2
    float32 finger3
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new SetFingersPositionFeedback(null);
    if (msg.fingers !== undefined) {
      resolved.fingers = FingerPosition.Resolve(msg.fingers)
    }
    else {
      resolved.fingers = new FingerPosition()
    }

    return resolved;
    }
};

module.exports = SetFingersPositionFeedback;
